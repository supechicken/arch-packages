pkgname=linux-custom
pkgver=6.12.40
pkgrel=1
arch=(x86_64)
license=(GPL-2.0-only)
conflicts=(linux-lts linux)

makedepends=(
  llvm
  clang
  lld
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
  zstd
  rsync
)

options=(!strip)

source=(
  https://github.com/intel/linux-intel-lts/archive/refs/tags/lts-v6.12.40-linux-250728T040815Z.tar.gz
  https://gitlab.archlinux.org/archlinux/packaging/packages/linux-lts/-/archive/6.12.40-1/linux-lts-6.12.40-1.tar.gz
  https://github.com/immortalwrt/immortalwrt/archive/refs/heads/master.tar.gz
  https://gitlab.com/xanmod/linux-patches/-/archive/master/linux-patches-master.tar.gz
  0001-ANDROID-dma-buf-heaps-Add-a-sysfs-file-to-report-tot.patch
  jumper-config  # the main kernel config file
)

sha256sums=(SKIP SKIP SKIP SKIP SKIP SKIP)

_patches=(
  ../0001-ANDROID-dma-buf-heaps-Add-a-sysfs-file-to-report-tot.patch
  ../linux-lts-*/*.patch # arch patches
  ../immortalwrt*/target/linux/generic/backport-6.12/*.patch
  ../immortalwrt*/target/linux/generic/{pending,hack}-6.12/6*.patch
  ../immortalwrt*/target/linux/generic/pending-6.12/7*-netfilter*.patch
  ../immortalwrt*/target/linux/x86/patches-6.12/*.patch
  ../linux-patches-*/linux-6.12.y-xanmod/net/tcp/{bbr3,cloudflare}/*.patch # network patches
  ../linux-patches-*/linux-6.12.y-xanmod/kconfig/0002-x86-kconfig-more-ISA-levels-and-uarches.patch
)

export SRCNAME=linux-intel-lts-lts-v*/
export KBUILD_BUILD_HOST=Maxsun-HTPC
export KBUILD_BUILD_USER=supechicken

prepare() {
  cd $SRCNAME

  shopt -s nullglob
  for p in ${_patches[@]}; do
    echo -e "\e[1;33mApplying patch $p...\e[0m"
    patch -Np1 < $p
  done
  shopt -u nullglob

  echo "Setting config..."
  scripts/kconfig/merge_config.sh -m ../linux-lts-6.*/config ../jumper-config
  
  make ARCH=x86_64 LLVM=1 LLVM_IAS=1 olddefconfig

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $SRCNAME

  make ARCH=x86_64 LLVM=1 LLVM_IAS=1 bzImage -j$(nproc)
  make ARCH=x86_64 LLVM=1 LLVM_IAS=1 modules -j$(nproc)
}

package() {
  mkdir -p $pkgdir/{boot,usr}
  cd $SRCNAME

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  make ARCH=x86_64 LLVM=1 LLVM_IAS=1 INSTALL_HDR_PATH=$pkgdir/usr headers_install -j$(nproc)

  ZSTD_CLEVEL=19 make \
    ARCH=x86_64 LLVM=1 LLVM_IAS=1 \
    DEPMOD=/doesnt/exist \
    INSTALL_MOD_PATH="$pkgdir/usr" \
    INSTALL_MOD_STRIP=1 \
    modules_install -j$(nproc)

  echo "Removing documentation..."
  rm -r Documentation

  echo "Removing loose objects..."
  find . -type f -name '*.o' -printf 'Removing %P\n' -delete

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  mkdir -p $pkgdir/usr/src
  cp -r . $pkgdir/usr/src/$pkgbase

  ln -sf /usr/src/$pkgbase $modulesdir/build
  sbsign --key /etc/secureboot/DB.key --cert /etc/secureboot/DB.crt --output arch/x86/boot/bzImage arch/x86/boot/bzImage
  install -Dm644 arch/x86/boot/bzImage $pkgdir/boot/vmlinuz-linux-custom
}
